name: Flask App CI/CD Pipeline

on:
  schedule:
    - cron: "*/2 * * * *"  # Run every 2 minutes
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.9

    - name: Install AWS CLI
      run: |
        set -ex
        if ! command -v aws &> /dev/null; then
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          sudo ./aws/install
        fi
        aws --version

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        region: us-east-1  # Change if needed

    - name: Create EC2 Instance
      id: create-ec2
      run: |
        INSTANCE_ID=$(aws ec2 run-instances \
          --image-id ami-0c55b159cbfafe1f0 \  # Change to your preferred AMI
          --instance-type t2.micro \
          --key-name my-key-pair \  # Change to your EC2 key pair
          --security-groups my-security-group \  # Ensure this allows SSH (port 22) and app traffic
          --query 'Instances[0].InstanceId' \
          --output text)

        echo "Instance ID: $INSTANCE_ID"
        echo "INSTANCE_ID=$INSTANCE_ID" >> $GITHUB_ENV

    - name: Wait for EC2 to be Running
      run: |
        aws ec2 wait instance-running --instance-ids $INSTANCE_ID

    - name: Get EC2 Public IP
      id: get-ip
      run: |
        PUBLIC_IP=$(aws ec2 describe-instances \
          --instance-ids $INSTANCE_ID \
          --query 'Reservations[0].Instances[0].PublicIpAddress' \
          --output text)
        
        echo "EC2 Public IP: $PUBLIC_IP"
        echo "EC2_HOST=$PUBLIC_IP" >> $GITHUB_ENV

    - name: Build Docker Image
      run: |
        docker build -t mirosh137/flaskapp:latest .

    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Push Docker Image to Docker Hub
      run: |
        docker tag mirosh137/flaskapp:latest mirosh137/flaskapp:1.0
        docker push mirosh137/flaskapp:1.0
        docker push mirosh137/flaskapp:latest

    - name: Copy Docker Compose file to EC2
      uses: appleboy/scp-action@v0.1.4
      with:
        host: ${{ env.EC2_HOST }}
        username: ec2-user
        key: ${{ secrets.EC2_SSH_KEY }}
        source: "docker-compose.yml"
        target: "~/flaskapp/"

    - name: Deploy to EC2 with Docker Compose
      uses: appleboy/ssh-action@v0.1.10
      with:
        host: ${{ env.EC2_HOST }}
        username: ec2-user
        key: ${{ secrets.EC2_SSH_KEY }}
        script: |
          sudo yum update -y
          sudo yum install -y docker
          sudo systemctl start docker
          sudo usermod -aG docker ec2-user
          newgrp docker

          cd ~/flaskapp

          docker-compose down || true
          docker pull mirosh137/flaskapp:latest
          docker-compose up -d --force-recreate --remove-orphans

          docker image prune -af
